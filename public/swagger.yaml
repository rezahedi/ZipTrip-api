openapi: 3.0.0
info:
  title: One Day Planner API
  contact: {}
  version: '1.0'
servers:
  - url: http://localhost:8000/api/v1
    variables: {}
  - url: https://ii-practicum-team-5-back-1.onrender.com/api/v1
    variables: {}
paths:
  /plans:
    get:
      tags:
        - Plans
      summary: Get All Plans, filter by category or search, with pagination of 10 rows by default
      operationId: GetAllPlans
      parameters:
        - $ref: '#/components/parameters/CategoryIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "search": "San Francisco",
                  "categoryId": "city-exploration",
                  "page": 1,
                  "size": 10,
                  "pagesCount": 2,
                  "items": [
                    {
                      "_id": "plan-id-sdfsde",
                      "userId": {
                        "_id": "user-id-sdfdsf",
                        "name": "Reza"
                      },
                      "title": "New York City Essentials Tour",
                      "images": [
                        "https://example.com/image1.jpg",
                        "https://example.com/image2.jpg",
                      ],
                      "stopCount": 2,
                      "reviewCount": 83,
                      "startLocation": [40.7924939, -73.95190889999999],
                      "finishLocation": [40.7614327, -73.97762159999999],
                      "distance": 8.3,
                      "duration": 4,
                      "type": "Half day",
                      "isBookmarked": false
                    }
                  ]
                }
          headers: {}
      deprecated: false
  /plans/{planId}:
    parameters:
      - in: path
        name: planId
        schema:
          type: string
          example: plan-id-sdfsdf
        required: true
        description: The plan ID
    get:
      tags:
        - Plans
      summary: Get Single Plan plus all the related stops
      operationId: GetPlan
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "plan-id-sdfsdf",
                  "userId": {
                    "_id": "user-id-sdfdsf",
                    "name": "Reza",
                    "imageURL": "http://example.com/reza.jpg"
                  },
                  "title": "New York City Essentials Tour",
                  "description": "lorem ipsum dolor sit amet, consectetur adipiscing elit",
                  "images": [
                    "https://example.com/image1.jpg",
                    "https://example.com/image2.jpg"
                  ],
                  "stopCount": 1,
                  "reviewCount": 83,
                  "startLocation": [40.7924939, -73.95190889999999],
                  "finishLocation": [40.7614327, -73.97762159999999],
                  "distance": 8.3,
                  "duration": 4,
                  "createdAt": "2025-04-22T23:54:08.160Z",
                  "updatedAt": "2025-09-16T22:23:47.445Z",
                  "type": "Half day",
                  "stops": [
                    {
                      "placeId": "place-id-sdfsdf",
                      "name": "Museum of the City of New York",
                      "description": "",
                      "imageURL": "example.com/museum.jpg",
                      "address": "1220 5th Ave, New York, NY 10029, USA",
                      "location": [40.7924939, -73.95190889999999]
                    }
                  ],
                  "isBookmarked": false
                }
          headers: {}
      deprecated: false
  /plans/user/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
          example: user-id-sdfsd
        required: true
        description: The user ID
    get:
      tags:
        - Plans
      summary: Get a user's detail and their plans
      operationId: GetUserPlans
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "user-id-sdfsdf",
                  "name": "Alice Johnson",
                  "imageURL": "http://example.com/alice.jpg",
                  "email": "alice.johnson@example.com",
                  "plans": {
                    "page": 1,
                    "size": 10,
                    "pagesCount": 1,
                    "items": [
                      {
                        "_id": "plan-id-sdfds",
                        "userId": {
                          "_id": "user-id-sdfds",
                          "name": "Meesha"
                        },
                        "title": "Detroit in a Day: Art, Cars & Coney Dogs",
                        "images": [
                          "https://example.com/image1.jpg"
                        ],
                        "type": "Full day",
                        "stopCount": 2,
                        "reviewCount": 58,
                        "startLocation": [42.303600729743586, -83.23413192891658],
                        "finishLocation": [42.35953514344295, -83.06453360524505],
                        "distance": 3,
                        "duration": 2,
                        "categoryId": {
                          "_id": "category-id-sdfsdf",
                          "name": "City Exploration"
                        },
                        "isBookmarked": false
                      }
                    ]
                  }
                }
          headers: {}
      deprecated: false
  /plans/city:
    get:
      tags:
        - Plans
      summary: Get All Cities, filter by search, with pagination of 10 rows by default and also sort
      operationId: GetAllCities
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "page": 1,
                  "size": 10,
                  "sort": "-plans",
                  "pagesCount": 1,
                  "items": [
                    {
                      "_id": "item-id-sdfsd",
                      "placeId": "place-id-sdfsdf",
                      "imageURL": "http://example.com/san-leandro.jpg",
                      "name": "San Leandro, CA, USA",
                      "plans": 1,
                      "location": [37.7257, -122.15685]
                    }
                  ]
                }
          headers: {}
      deprecated: false
  /plans/city/{cityId}:
    parameters:
      - in: path
        name: cityId
        schema:
          type: string
          example: google-place-id-sdfsd
        required: true
        description: The equivalent Google Place ID for the city
    get:
      tags:
        - Plans
      summary: Get a city's detail and all their plans
      operationId: GetCityPlans
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "city-doc-id-sdfsdf",
                  "placeId": "google-place-id-sdfsd",
                  "name": "Oakland, CA",
                  "imageURL": "http://example.com/oakland-ca.jpg",
                  "location": [37.8094, -122.2598],
                  "plans": {
                    "page": 1,
                    "size": 10,
                    "pagesCount": 1,
                    "items": [
                      {
                        "_id": "plan-id-sdfds",
                        "userId": {
                          "_id": "user-id-sdfds",
                          "name": "Meesha"
                        },
                        "title": "Detroit in a Day: Art, Cars & Coney Dogs",
                        "images": [
                          "https://example.com/image1.jpg"
                        ],
                        "type": "Full day",
                        "stopCount": 2,
                        "reviewCount": 58,
                        "startLocation": [42.303600729743586, -83.23413192891658],
                        "finishLocation": [42.35953514344295, -83.06453360524505],
                        "distance": 3,
                        "duration": 2,
                        "cities": [{
                          "placeId": "google-place-id-sdfsdf",
                          "name": "Oakland, CA"
                        }],
                        "isBookmarked": false
                      }
                    ]
                  }
                }
          headers: {}
      deprecated: false
  /plans/nearby:
    get:
      tags:
        - Plans
      summary: Get list of plans filter by geo location bounding box
      parameters:
        - $ref: '#/components/parameters/LatMin'
        - $ref: '#/components/parameters/LngMin'
        - $ref: '#/components/parameters/LatMax'
        - $ref: '#/components/parameters/LngMax'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "count": 1,
                  "items": [
                    {
                      "_id": "plan-id-sdfsdf",
                      "userId": {
                        "_id": "user-id-sdfsdf",
                        "name": "Reza"
                      },
                      "title": "Golden Gate to Chinatown: Your Cultural Tour",
                      "images": [
                        "https://example.com/image1.jpg",
                        "https://example.com/image2.jpg"
                      ],
                      "stopCount": 7,
                      "reviewCount": 0,
                      "startLocation": [37.7938363, -122.408787],
                      "finishLocation": [37.7897395, -122.3961656],
                      "distance": 12,
                      "duration": 9,
                      "type": "Full day",
                      "isBookmarked": false
                    }
                  ]
                }
          headers: {}
      deprecated: false
  /places/nearby:
    get:
      tags:
        - Places
      summary: Get list of Places filter by geo location bounding box
      parameters:
        - $ref: '#/components/parameters/LatMin'
        - $ref: '#/components/parameters/LngMin'
        - $ref: '#/components/parameters/LatMax'
        - $ref: '#/components/parameters/LngMax'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "count": 1,
                  "items": [
                    {
                      "_id": "place-id-sdfsdf",
                      "placeId": "google-place-id-sdfsdf",
                      "name": "Ferry Building Marketplace",
                      "imageURL": "https://example.com/ferry-building.jpg",
                      "address": "1 Ferry Building, San Francisco, CA 94111",
                      "location": [37.7955, -122.3937]
                    }
                  ]
                }
          headers: {}
      deprecated: false
  /places/fetch/{googlePlaceId}:
    parameters:
      - in: path
        name: googlePlaceId
        schema:
          type: string
          example: google-place-id-sdfsdf
        required: true
        description: The Google place ID
    get:
      tags:
        - Places
      summary: Get json data fetched from google places api by the place id
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: A big json object returned from google places api
          headers: {}
      deprecated: false
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User with email and password
      operationId: RegisterUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserObject'
            example: |
              {
                "name": "bob",
                "email": "bob@example.com",
                "password": "secret"
              }
        required: true
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "user-id-example-sdfdsfkjhweiuh",
                  "name": "Bob",
                  "email": "bob@example.com",
                  "imageURL": "http://example.com/bob.jpg",
                  "token": "example-token-sdf98sdf879sdf9sd8fsd89f89wefw"
                }
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login User with email and password
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserObject'
            example: |
              {
                "email": "bob@example.com",
                "password": "secret"
              }
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "user-id-example-sdfdsfkjhweiuh",
                  "name": "Bob",
                  "email": "bob@example.com",
                  "imageURL": "http://example.com/bob.jpg",
                  "token": "example-token-sdf98sdf879sdf9sd8fsd89f89wefw"
                }
          headers: {}
      deprecated: false
      security: []
  /auth/request-reset-password:
    post:
      tags:
        - Auth 
      summary: User request to reset up password
      operationId: RequestResetPassword
      parameters: []
      requestBody:
        description: ''
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResetPasswordObject'
            example: |
              {
                "email": "bob@example.com"
              }
        required: true 
      responses:
        '204':
          description: Successful response and no content
      deprecated: false 
      security: []
  /auth/reset-password:
    post:
      tags:
        - Auth 
      summary: Reset auth's login password 
      operationId: ResetPassword
      parameters: [] 
      requestBody: 
        description: ''
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordObject'
            example: |
              {
                "resetToken": "example-token-daff05f70ce0af67a32e31346300051cf7c415af",
                "newPassword": "newPasswordExample"
              }
        required: true 
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "user-id-example-sdfdsfkjhweiuh",
                  "name": "Bob",
                  "email": "bob@example.com",
                  "imageURL": "http://example.com/bob.jpg",
                  "token": "example-token-sdf98sdf879sdf9sd8fsd89f89wefw"
                }
          headers: {}
      deprecated: false 
      security: []
  /account/plans:
    get:
      tags:
        - Account
      summary: Retrieve all of a user's plans
      security:
        - bearerAuth: []
      operationId: AccountGetUserPlans
      parameters: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "page": 1,
                  "size": 10,
                  "pagesCount": 1,
                  "items": [
                    {
                      "_id": "plan-id-sdfsd",
                      "userId": {
                          "_id": "user-id-sdfsd",
                          "name": "Reza"
                      },
                      "title": "New York City Essentials Tour",
                      "images": [
                          "https://example.com/image1.jpg"
                      ],
                      "stopCount": 8,
                      "rate": 4.1,
                      "reviewCount": 83,
                      "startLocation": [40.7924939, -73.95190889999999],
                      "finishLocation": [40.7614327, -73.97762159999999],
                      "distance": 8.3,
                      "duration": 4,
                      "type": "Half day"
                    }
                  ]
                }
          headers: {}
      deprecated: false
    post:
      tags:
        - Account
      summary: Create new Plan
      security:
        - bearerAuth: []
      operationId: CreatePlan
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPlanRequestBody'
            example: |
              {
                "title": "San Francisco Day Tour",
                "description": "A one-day tour exploring San Francisco's iconic sites.",
                "images": ["https://dummyimage.com/390x265/2196F3/fff.png"],
                "categoryId": "city-exploration",
                "stops": [
                  {
                    "placeId": "stop-001",
                    "name": "Ferry Building Marketplace",
                    "imageURL": "https://dummyimage.com/390x265/2196F3/fff.png",
                    "address": "1 Ferry Building, San Francisco, CA 94111",
                    "location": [37.7955, -122.3937]
                  },
                  {
                    "name": "Some Place",
                    "imageURL": "https://example.com/image.jpg",
                    "address": "Address of the place",
                    "location": [35, -101.32676]
                  }
                ]
              }
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "plan-id-sdfds",
                  "userId": {
                    "_id": "user-id-sdfsd",
                    "name": "Reza"
                  },
                  "title": "San Francisco Day Tour",
                  "description": "A one-day tour exploring San Francisco's iconic sites.",
                  "images": [
                    "https://example.com/image1.jpg"
                  ],
                  "stopCount": 1,
                  "stops": [
                    {
                      "placeId": "place-id-sdfdsf",
                      "name": "Place Name",
                      "imageURL": "http://example.com/image.jpg",
                      "address": "1 Ferry Building, San Francisco, CA 94111",
                      "location": [0, 0]
                    }
                  ],
                  "rate": 0,
                  "reviewCount": 0,
                  "startLocation":  [0, 0],
                  "finishLocation":  [0, 0],
                  "distance": 0,
                  "duration": 0,
                  "categoryId":  {
                    "_id": "category-id-sdfsd",
                    "name": "My first cat"
                  },
                  "createdAt": "2025-10-03T21:27:45.420Z",
                  "updatedAt": "2025-10-03T21:27:45.420Z",
                }
          headers: {}
      deprecated: false
  /account/plans/{planId}:
    parameters:
      - in: path
        name: planId
        schema:
          type: string
          example: plan-id-sdfsd
        required: true
        description: The plan ID
    get:
      tags:
        - Account
      summary: Retrieve a plan details along with the associated stops
      security:
        - bearerAuth: []
      operationId: AccountGetPlan
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "plan-id-sdfds",
                  "userId": {
                    "_id": "user-id-sdfdsf",
                    "name": "Reza"
                  },
                  "title": "A Day Around Lake Merritt: Nature, Culture & Good Eats",
                  "description": "lorem ipsum dolor sit amet, consectetur adipiscing elit",
                  "images": [
                    "https://example.com/image1.jpg"
                  ],
                  "type": "Full day",
                  "stopCount": 1,
                  "rate": 2.9,
                  "reviewCount": 95,
                  "startLocation": [37.80940406629325, -122.25985216557562],
                  "finishLocation": [37.8098488, -122.2610236],
                  "distance": 4,
                  "duration": 5,
                  "createdAt": "2025-05-14T05:36:21.948Z",
                  "updatedAt": "2025-09-16T22:33:36.732Z",
                  "stops": [
                    {
                      "placeId": "place-id-sdfds",
                      "name": "Children's Fairyland",
                      "description": "",
                      "imageURL": "https://example.com/children-fairyland.jpg",
                      "address": "699 Bellevue Ave Oakland, CA 94610",
                      "location": [37.80940406629325, -122.25985216557562]
                    }
                  ]
                }
          headers: {}
      deprecated: false
    put:
      tags:
        - Account
      summary: Modify the plan details
      security:
        - bearerAuth: []
      operationId: AccountUpdatePlan
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPlanRequestBody'
            example: |
              {
                "title": "San Francisco Day Tour",
                "description": "A one-day tour exploring San Francisco's iconic sites.",
                "images": ["https://dummyimage.com/390x265/2196F3/fff.png"],
                "categoryId": "city-exploration",
                "stops": [
                  {
                    "placeId": "stop-001",
                    "name": "Ferry Building Marketplace",
                    "imageURL": "https://dummyimage.com/390x265/2196F3/fff.png",
                    "address": "1 Ferry Building, San Francisco, CA 94111",
                    "location": [37.7955, -122.3937]
                  },
                  {
                    "name": "Some Place",
                    "imageURL": "https://example.com/image.jpg",
                    "address": "Address of the place",
                    "location": [35, -101.32676]
                  }
                ]
              }
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "_id": "plan-id-sdfds",
                  "userId": {
                    "_id": "user-id-sdfsd",
                    "name": "Reza"
                  },
                  "title": "San Francisco Day Tour",
                  "description": "A one-day tour exploring San Francisco's iconic sites.",
                  "images": [
                    "https://example.com/image1.jpg"
                  ],
                  "stopCount": 1,
                  "stops": [
                    {
                      "placeId": "place-id-sdfdsf",
                      "name": "Place Name",
                      "imageURL": "http://example.com/image.jpg",
                      "address": "1 Ferry Building, San Francisco, CA 94111",
                      "location": [0, 0]
                    }
                  ],
                  "rate": 0,
                  "reviewCount": 0,
                  "startLocation":  [0, 0],
                  "finishLocation":  [0, 0],
                  "distance": 0,
                  "duration": 0,
                  "categoryId":  {
                    "_id": "category-id-sdfsd",
                    "name": "My first cat"
                  },
                  "createdAt": "2025-10-03T21:27:45.420Z",
                  "updatedAt": "2025-10-03T21:27:45.420Z",
                }
          headers: {}
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a plan including all the associated stops
      security:
        - bearerAuth: []
      operationId: AccountDeletePlan
      parameters: []
      responses:
        '204':
          description: 'No Content'
          headers: {}
      deprecated: false
  /account/plans/{planId}/image:
    parameters:
      - in: path
        name: planId
        schema:
          type: string
          example: plan-id-sdfsd
        required: true
        description: The plan ID
    post:
      tags:
        - Account
      summary: Upload an image for a plan
      security:
        - bearerAuth: []
      operationId: AccountUploadImagePlan
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AccountPlanUploadImageRequestBody'
            encoding:
              image:
                contentType: image/*  # optional, restricts allowed MIME types
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "imageURL": "https://example.com/image1.jpg"
                }
          headers: {}
      deprecated: false
  /account/bookmarks:
    get:
      tags:
        - Bookmark
      summary: Fetch all plans bookmarked by the currently logged-in user
      security:
        - bearerAuth: []
      operationId: AccountGetUserBookmarks
      parameters: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              example: |
                {
                  "page": 1,
                  "size": 10,
                  "pagesCount": 1,
                  "items": [
                    {
                      "_id": "plan-id-sdfds",
                      "userId": {
                        "_id": "user-id-sdfsd",
                        "name": "Nihal"
                      },
                      "title": "One Night in Vegas: Lights, Views, and a Bite",
                      "images": [
                        "https://example.com/image1.jpg"
                      ],
                      "stopCount": 0,
                      "rate": 36,
                      "reviewCount": 36,
                      "startLocation": [2343243, -234234],
                      "finishLocation": [2343243, -234234],
                      "distance": 7,
                      "duration": 2,
                    }
                  ]
                }
          headers: {}
      deprecated: false
  /account/bookmarks/{planId}:
    parameters:
      - in: path
        name: planId
        schema:
          type: string
        required: true
        description: The plan ID
    post:
      tags:
        - Bookmark
      summary: Add a plan to the authenticated user's list of bookmarks
      security:
        - bearerAuth: []
      operationId: AccountAddBookmark
      parameters: []
      responses:
        '201':
          description: Successful Response with No Content
          headers: {}
      deprecated: false
    delete:
      tags:
        - Bookmark
      summary: Remove a plan from the authenticated user's list of bookmarks
      security:
        - bearerAuth: []
      operationId: AccountRemoveBookmark
      parameters: []
      responses:
        '204':
          description: 'No Content'
          headers: {}
      deprecated: false
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUserObject:
      title: Register's Object
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    LoginUserObject:
      title: Login's Object
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RequestResetPasswordObject:
      type: object 
      properties:
        email: 
          type: string 
          format: email 
          example: bob@example.com
      required:
        - email 
    ResetPasswordObject:
      type: object 
      properties:
        resetToken:
          type: string 
          example: example-token-daff05f70ce0af67a32e31346300051cf7c415af
        newPassword:
          type: string 
          example: newPasswordExample
      required:
        - resetToken 
        - newPassword 
    AccountPlanUploadImageRequestBody:
      title: Image's Object
      type: object
      properties:
        image:
          type: string
          format: binary
          description: The image file to upload
      required:
        - image
    AccountPlanRequestBody:
      title: Plan's Object
      required:
        - title
        - description
        - images
        - categoryId
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        type:
          type: string
        duration:
          type: string
        categoryId:
          type: string
        stops:
          type: array
          items:
            type: object
            title: Stop's Object
            required:
              - name
              - imageURL
              - address
            properties:
              name:
                type: string
              imageURL:
                type: string
              address:
                type: string
              description:
                type: string
              location:
                type: array
                items:
                  type: number
              sequence:
                type: number
    AccountCategoryRequestBody:
      title: Category's Object
      required:
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageURL:
          type: string
  parameters:
    CategoryIdParam:
      name: categoryId
      in: query
      schema:
        type: string
        example: nature-and-history
      required: false
      description: Category ID to filter plans by category (optional)

    SortParam:
      name: sort
      in: query
      schema:
        type: string
        default: "-plans"
      required: false
      description: Sort the result (optional, default is '-plans')

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        default: 1
      required: false
      description: Page number for pagination (optional, default is 1)

    SizeParam:
      name: size
      in: query
      schema:
        type: integer
        default: 10
      required: false
      description: Number of items per page for pagination (optional, default is 10)

    SearchParam:
      name: search
      in: query
      schema:
        type: string
        default: null
      required: false
      description: (NOT Working Yet) Search through title of plans to find matching words (optional)

    LatMin:
      name: latmin
      in: query
      schema:
        type: number
        default: null
      required: true
      description: Minimum latitude
    LngMin:
      name: lngmin
      in: query
      schema:
        type: number
        default: null
      required: true
      description: Minimum longitude
    LatMax:
      name: latmax
      in: query
      schema:
        type: number
        default: null
      required: true
      description: Maximum latitude
    LngMax:
      name: lngmax
      in: query
      schema:
        type: number
        default: null
      required: true
      description: Maximum longitude
tags:
  - name: Plans
    description: Fetching plans for public views
  - name: Places
    description: Fetching places for public views
  - name: Auth
    description: Simple user authentication with email & password
  - name: Account
    description: Logged in user operation for user's dashboard
  - name: Bookmark
    description: Allows the authenticated user to list, add, or remove bookmarked plans